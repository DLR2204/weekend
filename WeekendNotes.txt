
on - 1 off-0 ------------->Ascii/unicode

computer lang ----programs ---set of instructions


s.l :- designing of websites

p.l :- developing the softwares
								
								computer lang
								
						scripting lang   programming lang
					
			html,css,bootstrap			pop 		oop
								
								basic,python...		java,.net,python....
								
	
	security :- abstraction,encapsulation
	
	performance :- inheritance,polymorphism
								
	


java:- 	

(1)platform independency

(2)Garbage collector
				
				
	sunmicrosystem---------------------------------------->oracle
	
	
	greentalk(.gt)-------------->oak----------------------->java(.java)
	
	
	jdk 1.0------------------------------------------------->jdk 23
				
				
		jse/j2se :- standalone app's(no client-server)  --core java

		jee/j2ee :-distributed app's(client-server)    -- core java + adv java
		
		jme/j2me :- mobile app's 					-- micro java
		
		
		
		53  - reserved words/keyword 
		
		varaibles :- 
		==========
		
		
		syntax:- 	datatype varname;  //declaration of varaible
		
					datatype varaible = value ;  //initiallization of a varaible
					
					
			local variables(within the method) 		global variables(outside the method)
													
													static 			instance
													
													
syntax :- 
======	
	static :- 		static datatype varaible = value ; 
	
	instance:-		datatype varaible = value ; 
	
access:-
======

	static :-Static porp's can be accessed by using class reference.
	
	instance:-Instance prop's can be accessed by using object reference.	
					
		Object creation syntax:- 
					
					className objname = new className();
		
	
memory space:-
=============

	static :-Static prop's will gets the memory space only once when the class loads into the jvm.
	
	instance:-Instance prop's will gets the memory space for every object creation.	
	
	
in the memory :-

	static :- Method Area
	
	instance:- Heap Area

	
usage :- 

	static :- Common data  
	
	instance:-	 unique data		
	
	
				operators :-  ULTRA AB
				==========
				
				
				a + b --->operands

Uniary 
		
Logical

Ternary

Relational

Assignment

Arithematic

Bitwise		
				
				
		Flow COntrol Statements :- 		
				
	ide shortcuts :- 
	
---->	ctrl+space 
	
	main
	
	syso
		
	suggestion

---->ctrl+shift+o --->imports

---->ctrl +shift +f ---->format	


	class :- var + method (members, mem function)
	
	object :-
		
		
		methods :- set of statements where altogether will performs a task
		
		syntax:- accessmodifer returntype methodName(prams...){
		
		
				//body
				}
				
				
		(1)static methods:-class reference 
		
		
		syntax:- accessmodifer static returntype methodName(prams...){
		
		
				//body
				}
		
		
		(2)dynamic method:- obj reference
		
		syntax:- accessmodifer returntype methodName(prams...){
		
		
				//body
				}
				
		Inheritance :- Accquiring parent class props to the child class	
		-----------

							* CODE REUSEABILITY
		
				extends 					implements
			
			class ----->class				interface ---->clss
			interface---->interfce

			
				
		class A{				class B{
		
		add(a,b){				add(x,y)
		}						}
		
		
		class C extends A,B{
		
		
		add(2,6);
		
		}
		
		
		*M.I is not supported in java @class level
		
		*M.I is supported in java @interface level
		
		
		methods :- based on the method body -2 types
		
		(1)concrete method :- methods with method body
		
		
		syntax:- accessmodifer returntype methodName(prams...){
		
		
				//body
				}
		
		(2)abstract methods :- methods without method body
		
		syntax:- accessmodifer returntype methodName(prams...);
		
		
		class :- it is the only collection of concretes methods.
		
		interface :- it is the only collection of abstract methods
		
		abstract clss:- it is the combination of both concrete and abstract methods.
		
		
		Abstraction :- hiding the logic 
		===========				
					* security
					
		class            0%
		
		interface		100%
		 
		abstract clss   0%-100%
		
		
		Polymorphism :-  *Code Reuseability
		============
		
		(1)MethodOverloading:- the method name is same but with diff parameters....
								(a)type of parameters
								(b)order of parameters
								(c)number of parameters
								
		(2)MethodOverriding:- the method name is same but with diff method body.
		
		
		clss Parent {
		
		10000Cr();
		
		marriage(){
		kajol;
		}
		10000 method();
		}
		
		class child extends Parent{
		
		@Override
		marriage(){
		deepika;
		}
		
		
		}
		
		
		Encapsulation :- It will wraps up the data into a single unit/class
		-------------
								*Security
		
		Constructor :-  To initialize the obj
		
				(1)Default Constructor
				
				Syntax :- 
				
						accessmodifier  ClassName(){
						
						//body
						}
				
				(2)Parametrized Constructor
				
				Syntax :- 
				
						accessmodifier  ClassName(params...){
						
						//body
						}
						
						
		For every java file the default package is "java.lang"
		
		For every java class the parent class is "java.lang.Object" 
		
		
		Array :- It is collection similar kind of object
		------
		
		(1) int arrayName[];//declaration of an array
		
			int arrayName[] = {1,2,3,4,5,56,6,76,7,7};  //initiallization of an array
		
		 (2)int arrayName[] = new int[9];
		 
		 (3)int arrayName[] = new int[]{1,2,3,4,5,,6,6,6,7};
						
		
						
		limitation :-
		
		(1)size is fixed
		
		(2)allows only homogenous elements 
		
		(3)no methods 
		
		
		collections :- framework
		===========
		(1)it's growable in nature
		
		(2)It will allows both homogenous/heterogenous elements
		
		(3)lots of utility methods.
		
		
		Date API :- 
		========
		
		java.util.Date;
		
		java.time.LocalDate;---------------->static methods(can't be overrided)
		
		
		fileHandling :- java.io;
		=============
		
		
		create a file     :- File
		
		
		write into the file:- FileWriter
							  BufferedWriter
							  PrintWriter
							  
		read from the file:- FileReader
							 BufferedReader
							 
							 
		
		String:- 
		=======
		String varname = value;
		
		
		String 							StringBuffer				StringBuilder
		
		immutable						mutable						mutable
		
										Sync					Not-Sync(multithreading)
		
		
		MultiThreading:- Running multiple threads at a time where each thread is independent on each other
		
		
		Thread,Runnable
		
		
		Junit :- Java unit testing
		
											Database(oracle)
											========

Data :- Raw info of any real world entity.

Database :- Organised collection of data

Database :- oracle db ,dbms :- Rdbms ; lang -sql

Table = rows(records) + columns(fields)

Query :- 5 types 

DDL(Data Definition Language) :- create,alter,rename,drop,truncate [atuo-commited]

DML(Data Manipulation Language) :-insert,update,delete [not-committed]

DRL(Data Retrival Language) :- select

DCL(Data Control Language) :- grant,revoke

TCL(Transaction COntrol Language) :- commit,rollback



To create an user:- 

cmd> conn /as sysdba;

cmd> create user username identified by password;

cmd>  grant connect, resource to username;

cmd> conn username/password;


drop :- will deletes entire table with records

truncate :- will earises all the records.


							jdbc(java database connectivity)
							================================
							
				java<--------------->drivers(thin)<--------------->database(oracle)
				

(1)Loading the driver classes

(2)Creating the connection

(3)Creating the statements

(4)Execute the statement

(5)Close the connection



(1)Queries 

(2)Table creation

(3)boiler plate code

(4)Exception handling

(5)same file for logic,db prop's.


jpa [java persistence api]  ----->Spefications
===
(1)No Queries 

(2)No Table creation

(3)No boiler plate code

(4)No Exception handling

(5)diif file for logic,db prop's.

ORM TOOLS :- hibernate,ecllipse link,top link ,ibatis...........
-----------

(1)Query equivalent methods

(2)Class----->Table

(3)logic-->.java,db prop's --->xml file

